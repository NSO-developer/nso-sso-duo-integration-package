#!/usr/bin/env python3

import base64, json, logging, os, sys
import ncs, _ncs
import grp
from pwd import getpwnam, getpwall


logdir = os.getenv("NCS_LOG_DIR")
if logdir is None:
    # fallback local install
    logdir = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                          "../../../../../logs")

logname = os.path.join(logdir, "ncs-python-saml2-auth-challenge.log")
if not os.path.isdir(logdir):
    os.mkdir(logdir)

logfmt = ("%(asctime)s.%(msecs)02d %(filename)s:%(lineno)s"
          " %(levelname)s: %(message)s")
logging.basicConfig(filename=logname, filemode="a+", format=logfmt,
                    datefmt="%Y-%m-%d %H:%M:%S", level=logging.INFO)
logger = logging.getLogger(__name__)



def base64_to_str(b):
    return base64.decodebytes(b.encode("utf-8")).decode("utf-8")

def str_to_base64(s):
    return base64.encodebytes(s.encode("utf-8")).decode("utf-8")

def parse_args(args):
    """
    Parse args and put them in a dict.

    See paragraph at top of file and NSO Package Authentication documentation
    for details.
    """
    a = dict(zip(["challengeid", "response", "srcip", "srcport", "ctx", "proto"],
                 args.strip("[]").split(";")))
    a["challengeid"] = base64_to_str(a["challengeid"])
    a["response"] = base64_to_str(a["response"])

    return a

def main():
    logger.info(f"Trigger Package Challenge")
    """Simple test package chal that echoes your input."""    
    l = sys.stdin.readline()
    logger.info(f"echo-chal - line: " + l.replace("\n", ""))
    a = parse_args(l)
    logger.info(f"echo-chal - ctx: " + str(a))

    file1 = open(f"/tmp/{a['challengeid']}.txt", "r") 
    faresult=file1.read()
    file1.close()
    logger.info("deleting - "+f"/tmp/{a['challengeid']}.txt")
    os.remove(f"/tmp/{a['challengeid']}.txt")

    logger.info("faresult - "+str(faresult))
    #[6] Successful Duo login for 'admin'
    #[4] Failed Duo login for 'admin'   
    if "Successful" in faresult:
        userobj=getpwnam(a["challengeid"])
        logger.info("User Information - " + str(userobj))
        uid=userobj.pw_uid
        gid=userobj.pw_gid
        groups=grp.getgrgid(gid).gr_name
        homedir=userobj.pw_dir
        accept = (f"accept_username {str_to_base64(a['challengeid']).strip()} "
                               f"{groups} "
                               f"{uid} "
                               f"{gid} "
                               f"{gid} "
                               f"{homedir}")
        #accept=f"accept {groups} {a['challengeid']} {uid} {gid} /home/{a['challengeid']} {a['challengeid']}"
        logger.info(f"{accept}")
        print(f"{accept}", flush=True)
        logger.info("Auth Successed")
    else:
        logger.error("DUO authentication failed")
        print("reject 'DUO authentication failed'", flush=True)


if __name__ == "__main__":
    main()
